% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polyfuzz.R
\name{polyfuzz_tfidf}
\alias{polyfuzz_tfidf}
\title{A character based n-gram TF-IDF to approximate edit distance
We turn a string into, typically of length 3, n-grams. For example, using 3-grams of the "hotel" we get ['hot', 'ote', 'tel']. These are then used as input for a TfidfVectorizer in order to create a vector for each word. Then, we simply apply cosine similarity through k-NN}
\usage{
polyfuzz_tfidf(
  n_gram_range = list(3L, 3L),
  clean_string = TRUE,
  min_similarity = 0.75,
  top_n = 1,
  cosine_method = "sparse",
  model_id = NULL
)
}
\arguments{
\item{n_gram_range}{The n_gram_range on a character-level default `list(3L, 3L)`}

\item{clean_string}{Whether to clean the string such that only alphanumerical characters are kept.  Default `TRUE`}

\item{min_similarity}{The minimum similarity between strings, otherwise return 0 similarity.  Default `.75`}

\item{top_n}{The number of matches you want returned}

\item{cosine_method}{The method/package for calculating the cosine similarity. Options: `sparse` `sklearn` and `knn`.  Default is `sparse`}

\item{model_id}{The name of the particular instance, used when comparing models}
}
\description{
A character based n-gram TF-IDF to approximate edit distance
We turn a string into, typically of length 3, n-grams. For example, using 3-grams of the "hotel" we get ['hot', 'ote', 'tel']. These are then used as input for a TfidfVectorizer in order to create a vector for each word. Then, we simply apply cosine similarity through k-NN
}
